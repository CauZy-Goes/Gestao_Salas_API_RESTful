package ucsal.cauzy.domain.service;

import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.theokanning.openai.OpenAiService;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.twilio.Twilio;
import com.twilio.rest.api.v2010.account.Message;
import com.twilio.type.PhoneNumber;
import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration;
import org.springframework.stereotype.Service;
import ucsal.cauzy.domain.entity.EspacoFisico;
import ucsal.cauzy.domain.entity.Solicitacoes;
import ucsal.cauzy.domain.entity.Usuario;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
public class ChatBotService {

    private final SystemMetricsAutoConfiguration systemMetricsAutoConfiguration;

    private final UsuarioService usuarioService;

    private final SolicitacoesService solicitacoesService;

    private final EspacoFisicoService espacoFisicoService;

    @Value("${twilio.account-sid}")
    private String accountSid;

    @Value("${twilio.auth-token}")
    private String authToken;

    @Value("${twilio.phone-number}")
    private String fromPhone;

    @Value("${openai.api-key}")
    private String openAiApiKey;

    private OpenAiService openAiService;

    private final ObjectMapper mapper = new ObjectMapper();

    public ChatBotService(SystemMetricsAutoConfiguration systemMetricsAutoConfiguration,
                          UsuarioService usuarioService, SolicitacoesService solicitacoesService, EspacoFisicoService espacoFisicoService) {
        this.systemMetricsAutoConfiguration = systemMetricsAutoConfiguration;
        this.usuarioService = usuarioService;
        this.solicitacoesService = solicitacoesService;
        this.espacoFisicoService = espacoFisicoService;
    }

    @PostConstruct
    public void init() {
        Twilio.init(accountSid, authToken);
        openAiService = new OpenAiService(openAiApiKey);
    }

    private String formatarNumero(String numeroBruto) {
        // Remove o prefixo "whatsapp:" e o "+"
        return numeroBruto.replace("whatsapp:", "").trim();
    }

    public void responderParaWhatsApp(String mensagemRecebida, String numeroDestino) {
        String numeroFormatado = formatarNumero(numeroDestino);
        Usuario usuario = usuarioService.findByNumero(numeroFormatado);

        if (usuario == null) {
            enviarMensagem(numeroDestino, "Usu√°rio n√£o encontrado.");
            return;
        }

        String respostaIA = chamarChatGPT(mensagemRecebida, usuario);

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(respostaIA);

            String action = jsonNode.get("action").asText();

            if ("add_solicitacao".equals(action)) {
                int idEspacoFisico = jsonNode.get("idEspacoFisico").asInt();
                String dataHoraLocacaoStr = jsonNode.get("dataHoraLocacao").asText();
                LocalDateTime dataHoraLocacao = LocalDateTime.parse(dataHoraLocacaoStr);
                String descricao = jsonNode.get("descricao").asText();

                Solicitacoes novaSolicitacao = new Solicitacoes();
                novaSolicitacao.setEspacoFisico(espacoFisicoService.findById(idEspacoFisico) );
                novaSolicitacao.setDataHoraLocacao(dataHoraLocacao);
                novaSolicitacao.setDataHoraSolicitacao(LocalDateTime.now());
                novaSolicitacao.setUsuarioSolicitante(usuarioService.findById(usuario.getIdUsuario()) );
                novaSolicitacao.setDescricao(descricao);

                solicitacoesService.salvar(novaSolicitacao);

                enviarMensagem(numeroDestino, "Sua solicita√ß√£o foi criada com sucesso! ‚úÖ");
            } else if ("list".equals(action)) {
                enviarMensagem(numeroDestino, gerarResumoSolicitacoes(usuario));
            }
             else if ("listSpace".equals(action)) {

                 List<String> lista = listaEspacosPaginar();

                 for(String str : lista) {
                     enviarMensagem(numeroDestino, str);
                 }
            }
            else if ("chat".equals(action)) {
                String resposta = jsonNode.get("content").asText();
                enviarMensagem(numeroDestino, resposta);
            } else {
                enviarMensagem(numeroDestino, "N√£o entendi a solicita√ß√£o.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            enviarMensagem(numeroDestino, "Erro ao interpretar a resposta da IA.");
        }
    }

    private String chamarChatGPT(String mensagem, Usuario usuario) {
        String nome = (usuario != null) ? usuario.getNomeUsuario() : "professor";

        String contexto = """
                    Voc√™ √© uma IA assistente do *Sistema de Gest√£o de Solicita√ß√µes e Espa√ßos F√≠sicos*, desenvolvido por Cau√£.
                    
                    seja bastante carism√°tico, legal e descolado
                    
                    Sua principal miss√£o √© auxiliar os professores da universidade a:
                    ‚úÖ Listar todas as suas solicita√ß√µes de uso de espa√ßos f√≠sicos;
                    ‚úÖ Listar todos os espa√ßos f√≠sicos dispon√≠veis para uso;
                    ‚úÖ Criar novas solicita√ß√µes de uso de espa√ßo f√≠sico com base nas informa√ß√µes fornecidas.
                    
                    Quem vai falar com voce seram os professores, eles vao querer ver quais as salas estam disponiveis para fazer os agendamentos deles, logo 
                    eles vao querer agendar/solicitar agendamentos/solicitacoes de salas para fazer suas atividades, vc √© capas de fazer essa agendamento e tb √© capaz de mostrar
                    as solicitacoes/ agendamentos do professor.
                
                    Quando o usu√°rio enviar uma mensagem, responda *somente* com um JSON v√°lido, conforme os exemplos abaixo:
                
                    - Para listar/exibir/mostrar solicita√ß√µes de espa√ßos f√≠sicos/salas/aulas:
                      {
                        "action": "list"
                      }
                
                    - Para solicitar/agendar/fazer solicitacao/solicitar um espa√ßo/sala/aula/espaco fisico:
                      {
                        "action": "add_solicitacao",
                        "idEspacoFisico": <ID do espa√ßo>,
                        "dataHoraLocacao": "<Data e hora no formato ISO: yyyy-MM-ddTHH:mm:ss>",
                        "descricao": "<Descri√ß√£o da solicita√ß√£o>"
                      }
                
                    - Para listar/exibir/mostrar todos os espa√ßos f√≠sicos / salas do :
                      {
                        "action": "listSpace"
                      }
                
                    ‚ö†Ô∏è N√£o adicione explica√ß√µes, coment√°rios ou qualquer texto fora do JSON.
                
                    Se a mensagem n√£o for relacionada a solicita√ß√µes ou espa√ßos f√≠sicos, ou n√£o contiver dados suficientes, responda com:
                      {
                        "action": "chat",
                        "content": "<resposta natural>"
                      }
                
                    O nome do professor com quem voc√™ est√° conversando √©: """ + nome + """
                    use o vocativo sendo o nome do professor, exemplos : Ol√°, Professor """ + nome + """
                    Seja sempre cordial, √∫til em suas respostas. Sua fun√ß√£o √© tornar a intera√ß√£o com o sistema mais simples e r√°pida.
                """;


        ChatMessage systemMessage = new ChatMessage("system", contexto);
        ChatMessage userMessage = new ChatMessage("user", mensagem);

        ChatCompletionRequest request = ChatCompletionRequest.builder()
                .model("gpt-3.5-turbo")
                .messages(List.of(systemMessage, userMessage))
                .maxTokens(600)
                .temperature(0.9)
                .build();

        ChatCompletionResult result = openAiService.createChatCompletion(request);
        return result.getChoices().get(0).getMessage().getContent();
    }

    private String gerarResumoSolicitacoes(Usuario usuario) {
        var solicitacoes = solicitacoesService.pesquisa(
                null,
                usuario.getIdUsuario(),
                null,
                null,
                0,
                5
        );

        if (solicitacoes.isEmpty()) {
            return "Voc√™ ainda n√£o fez nenhuma solicita√ß√£o.";
        }

        StringBuilder sb = new StringBuilder("Aqui est√£o suas √∫ltimas solicita√ß√µes:\n\n");

        for (Solicitacoes s : solicitacoes) {
            sb.append("üìã *Detalhes da Solicita√ß√£o:*").append("\n")
                    .append("üè´ *Sala:* ").append(s.getEspacoFisico().getNumero()).append("\n")
                    .append("üìÇ *Tipo de Sala:* ").append(s.getEspacoFisico().getTipoSala().getNomeSala()).append("\n")
                    .append("üìÖ *Data da Loca√ß√£o:* ").append(s.getDataHoraLocacao().toLocalDate()).append("\n")
                    .append("üîñ *Status:* ").append(s.getStatus().getNomeStatus()).append("\n")
                    .append("üìù *Descri√ß√£o:* ").append(s.getDescricao()).append("\n")
                    .append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ").append("\n\n");

        }

        return sb.toString();
    }

    private List<String> listaEspacosPaginar() {
        var espacos = espacoFisicoService.findAll();
        List<String> mensagens = new ArrayList<>();

        if (espacos.isEmpty()) {
            mensagens.add("Voc√™ ainda n√£o fez nenhuma solicita√ß√£o.");
            return mensagens;
        }

        StringBuilder sb = new StringBuilder();
        for (EspacoFisico e : espacos) {
            String info = "‚ú® *Informa√ß√µes dos Espa√ßos*\n" +
                    "üÜî *ID da sala:* " + e.getIdEspacoFisico() + "\n" +
                    "üè´ *N√∫mero da Sala:* " + e.getNumero() + "\n" +
                    "üè∑Ô∏è *Tipo de Sala:* " + e.getTipoSala().getNomeSala() + "\n" +
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";

            // Se ultrapassar 1500 caracteres, envia e reinicia o builder
            if (sb.length() + info.length() > 1500) {
                mensagens.add(sb.toString());
                sb = new StringBuilder();
            }

            sb.append(info);
        }

        if (!sb.isEmpty()) {
            mensagens.add(sb.toString());
        }

        return mensagens;
    }

    private void enviarMensagem(String numeroDestino, String mensagem) {
                System.out.println(mensagem);
                Message.creator(
                new PhoneNumber(numeroDestino),
                new PhoneNumber(fromPhone),
                mensagem
        ).create();
    }
}
